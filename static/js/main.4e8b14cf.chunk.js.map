{"version":3,"sources":["features/questions/questionsSlice.ts","app/localStorage.ts","app/localStorageMiddleware.ts","app/store.ts","contexts/GameContext.tsx","components/UsernameForm.tsx","components/GameInfo.tsx","components/NoQuestions.tsx","components/Answers.tsx","components/GameForm.tsx","pages/GamePage.tsx","components/Input.tsx","features/questions/QuestionForm.tsx","features/questions/QuestionList.tsx","pages/ManageQuestionsPage.tsx","index.tsx","theme.ts"],"names":["questionsSlice","createSlice","name","initialState","value","reducers","addQuestion","state","action","payload","removeQuestion","filter","question","id","loadQuestions","actions","queryQuestions","questions","saveState","serializedState","JSON","stringify","localStorage","setItem","err","console","log","localStorageMiddleware","store","next","type","previewQuestions","getState","updatedQuestion","preloadedState","getItem","parse","loadState","configureStore","reducer","questionsReducer","middleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","concat","GameContext","React","createContext","username","updateUsername","score","incrementScore","hasAnsweredCurrent","toggleAnsweredCurrent","currentQuestionIndex","incrementCurrentQuestionIndex","restart","GameProvider","children","useState","setUsername","setScore","setHasAnsweredCurrent","setCurrentQuestionIndex","Provider","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","form","width","UsernameForm","classes","useContext","Container","component","maxWidth","className","Typography","variant","onSubmit","event","preventDefault","FormControl","margin","required","fullWidth","InputLabel","htmlFor","Input","autoComplete","autoFocus","onChange","currentTarget","Button","color","createStyles","root","height","GameInfo","Grid","container","justify","item","xs","Paper","align","NoMoreQuestions","style","textAlign","onClick","NoQuestions","Answers","answers","correct","selectedAnswer","setSelectedAnswer","handleAnswerClick","answer","dataset","map","index","backgroundColor","key","disabled","data-answer","GameForm","TextField","label","GamePage","useSelector","numberOfQuestions","length","createElement","InputRadio","inputValue","checked","radioValue","handleChange","Radio","Number","target","placeholder","DisabledInputRadio","QuestionForm","dispatch","useDispatch","useReducer","newState","A","B","C","D","setState","uuidv4","size","QuestionList","handleDeleteQuestion","List","dense","ListItem","ListItemSecondaryAction","data-id","right","IconButton","aria-label","Page","ManageQuestionsPage","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","App","ManageQuestions","page","setPage","BottomNavigation","newValue","showLabels","BottomNavigationAction","icon","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.4e8b14cf.chunk.js","sourcesContent":["import {createSlice, PayloadAction} from '@reduxjs/toolkit'\nimport {RootState} from '../../app/store'\n\nexport interface Question {\n  id: string\n  question: string\n  answers: string[]\n  correct: string\n}\nexport interface QuestionsState {\n  value: Question[]\n}\n\nconst initialState: QuestionsState = {\n  value: [],\n}\n\nexport const questionsSlice = createSlice({\n  name: 'questions',\n  initialState,\n  reducers: {\n    addQuestion: (state, action: PayloadAction<Question>) => {\n      return {value: [...state.value, action.payload]}\n    },\n    removeQuestion: (state, action: PayloadAction<string>) => {\n      return {\n        value: state.value.filter(\n          (question: Question) => action.payload !== question.id,\n        ),\n      }\n    },\n    loadQuestions: (state, action: PayloadAction<Question[]>) => {\n      return {value: action.payload}\n    },\n  },\n})\n\nexport const {addQuestion, removeQuestion} = questionsSlice.actions\n\nexport const queryQuestions = (state: RootState) => state.questions.value\n\nexport default questionsSlice.reducer\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state')\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    console.log('error', err)\n    return undefined\n  }\n}\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('state', serializedState)\n  } catch (err) {\n    console.log('error', err)\n  }\n}\n","import {Middleware} from 'redux'\nimport {RootState} from './store'\nimport {saveState} from './localStorage'\nimport {\n  addQuestion,\n  removeQuestion,\n  Question,\n} from '../features/questions/questionsSlice'\n\nexport const localStorageMiddleware = (store) => (next) => (action) => {\n  const {type, payload} = action\n  if (type === addQuestion.type) {\n    const previewQuestions = store.getState().questions.value\n    saveState({\n      questions: {\n        value: [...previewQuestions, payload],\n      },\n    })\n  }\n  if (type === removeQuestion.type) {\n    const previewQuestions = store.getState().questions.value\n    const updatedQuestion = previewQuestions.filter(\n      (question: Question) => payload !== question.id,\n    )\n    saveState({\n      questions: {\n        value: [...updatedQuestion],\n      },\n    })\n  }\n  return next(action)\n}\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\nimport questionsReducer from '../features/questions/questionsSlice'\nimport {loadState} from './localStorage'\nimport {localStorageMiddleware} from './localStorageMiddleware'\n\nconst preloadedState = loadState()\n\nexport const store = configureStore({\n  reducer: {\n    questions: questionsReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      thunk: false,\n      immutableCheck: false,\n      serializableCheck: false,\n    }).concat(localStorageMiddleware),\n  preloadedState,\n})\n\nexport type RootState = ReturnType<typeof store.getState>\n","import React from 'react'\n\nexport type GameType = {\n  username: string | null\n  updateUsername: (value: string) => void\n  score: number\n  incrementScore: () => void\n  hasAnsweredCurrent: boolean\n  toggleAnsweredCurrent: () => void\n  currentQuestionIndex: number\n  incrementCurrentQuestionIndex: () => void\n  restart: () => void\n}\nexport const GameContext = React.createContext<GameType>({\n  username: null,\n  updateUsername: (value) => {},\n  score: 0,\n  incrementScore: () => {},\n  hasAnsweredCurrent: false,\n  toggleAnsweredCurrent: () => {},\n  currentQuestionIndex: 0,\n  incrementCurrentQuestionIndex: () => {},\n  restart: () => {},\n})\nexport const GameProvider = ({children}: {children?: React.ReactNode}) => {\n  const [username, setUsername] = React.useState<string | null>(() => null)\n  const [score, setScore] = React.useState<number>(() => 0)\n  const [hasAnsweredCurrent, setHasAnsweredCurrent] = React.useState<boolean>(\n    () => false,\n  )\n  const [currentQuestionIndex, setCurrentQuestionIndex] = React.useState<\n    number\n  >(() => 0)\n\n  const updateUsername = (username: string) => {\n    setUsername(() => username)\n  }\n  const incrementScore = () => {\n    setScore((score: number) => ++score)\n  }\n  const toggleAnsweredCurrent = () => {\n    setHasAnsweredCurrent((hasAnsweredCurrent: boolean) => !hasAnsweredCurrent)\n  }\n  const incrementCurrentQuestionIndex = () => {\n    toggleAnsweredCurrent()\n    setCurrentQuestionIndex(\n      (currentQuestionIndex: number) => ++currentQuestionIndex,\n    )\n  }\n  const restart = () => {\n    setScore(0)\n    setCurrentQuestionIndex(0)\n    setHasAnsweredCurrent(false)\n  }\n  return (\n    <GameContext.Provider\n      value={{\n        username,\n        updateUsername,\n        score,\n        incrementScore,\n        hasAnsweredCurrent,\n        toggleAnsweredCurrent,\n        currentQuestionIndex,\n        incrementCurrentQuestionIndex,\n        restart,\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  )\n}\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport FormControl from '@material-ui/core/FormControl'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Typography from '@material-ui/core/Typography'\nimport Container from '@material-ui/core/Container'\nimport {makeStyles} from '@material-ui/core/styles'\n\nimport {GameContext, GameType} from '../contexts/GameContext'\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1),\n  },\n}))\n\nexport const UsernameForm = () => {\n  const classes = useStyles()\n  const {updateUsername} = React.useContext<GameType>(GameContext)\n  const [username, setUsername] = React.useState<string>(() => '')\n\n  const handleSetUsername = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault()\n    updateUsername(username)\n  }\n  const handleUsernameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const username = event.currentTarget.value\n    setUsername(() => username)\n  }\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Username\n        </Typography>\n        <form onSubmit={handleSetUsername} className={classes.form}>\n          <FormControl margin=\"normal\" required fullWidth>\n            <InputLabel htmlFor=\"username\">Username</InputLabel>\n            <Input\n              id=\"username\"\n              name=\"username\"\n              autoComplete=\"username\"\n              autoFocus\n              onChange={handleUsernameChange}\n              value={username}\n            />\n          </FormControl>\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\n            Set\n          </Button>\n        </form>\n      </div>\n    </Container>\n  )\n}\n","import React from 'react'\nimport {Theme, createStyles, makeStyles} from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\n\nimport {GameContext, GameType} from '../contexts/GameContext'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      '& > *': {\n        margin: theme.spacing(1),\n        width: theme.spacing(20),\n        height: theme.spacing(10),\n      },\n    },\n  }),\n)\n\nexport const GameInfo = () => {\n  const classes = useStyles()\n  const {username, score} = React.useContext<GameType>(GameContext)\n\n  return (\n    <Grid container spacing={3} justify=\"flex-end\">\n      <Grid item xs={3}>\n        <div className={classes.root}>\n          <Paper variant=\"outlined\">\n            <Typography variant=\"subtitle1\" component=\"h2\" align=\"center\">\n              Username: {username}\n            </Typography>\n            <Typography variant=\"subtitle2\" component=\"h2\" align=\"center\">\n              Score: {score}\n            </Typography>\n          </Paper>\n        </div>\n      </Grid>\n    </Grid>\n  )\n}\n","import React from 'react'\n\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\n\nimport {GameContext, GameType} from '../contexts/GameContext'\n\nexport const NoMoreQuestions = () => {\n  const {restart} = React.useContext<GameType>(GameContext)\n\n  return (\n    <>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item xs={5} style={{textAlign: 'center'}}>\n          <Typography component=\"h1\" variant=\"h4\">\n            No more questions\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item xs={3} style={{textAlign: 'center'}}>\n          <Button\n            onClick={() => restart()}\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n          >\n            Restart\n          </Button>\n        </Grid>\n      </Grid>\n    </>\n  )\n}\nexport const NoQuestions = () => {\n  return (\n    <>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item xs={5} style={{textAlign: 'center'}}>\n          <Typography component=\"h1\" variant=\"h4\">\n            No questions\n          </Typography>\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n","import React from 'react'\n\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\n\nimport {GameContext, GameType} from '../contexts/GameContext'\n\nexport const Answers = ({\n  answers,\n  correct,\n}: {\n  answers: string[]\n  correct: string\n}) => {\n  const {\n    hasAnsweredCurrent,\n    toggleAnsweredCurrent,\n    incrementScore,\n  } = React.useContext<GameType>(GameContext)\n\n  const [selectedAnswer, setSelectedAnswer] = React.useState<\n    string | undefined\n  >(() => '')\n\n  const handleAnswerClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const answer = event.currentTarget.dataset['answer']\n    setSelectedAnswer(() => answer)\n    if (answer === correct) {\n      incrementScore()\n    }\n    toggleAnsweredCurrent()\n  }\n  return (\n    <>\n      {answers.map((answer: string, index: number) => {\n        let backgroundColor\n\n        if (\n          selectedAnswer &&\n          answer === correct &&\n          selectedAnswer === correct\n        ) {\n          backgroundColor = 'rgba(0, 128, 0, 0.7)'\n        } else if (\n          selectedAnswer &&\n          answer === correct &&\n          selectedAnswer !== correct\n        ) {\n          backgroundColor = 'rgba(255, 0, 0, 0.7)'\n        } else if (selectedAnswer === answer) {\n          backgroundColor = 'rgba(0, 0, 255, 0.7)'\n        } else {\n          backgroundColor = 'rgba(0, 0, 0, 0.12)'\n        }\n        return (\n          <Grid item xs={3} key={index} style={{textAlign: 'center'}}>\n            {hasAnsweredCurrent ? (\n              <Button\n                variant=\"contained\"\n                disabled\n                fullWidth\n                style={{backgroundColor: `${backgroundColor}`}}\n              >\n                {answer}\n              </Button>\n            ) : (\n              <Button\n                variant=\"contained\"\n                data-answer={answer}\n                fullWidth\n                onClick={handleAnswerClick}\n              >\n                {answer}\n              </Button>\n            )}\n          </Grid>\n        )\n      })}\n    </>\n  )\n}\n","import React from 'react'\n\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\n\nimport {Question} from '../features/questions/questionsSlice'\nimport {GameContext, GameType} from '../contexts/GameContext'\nimport {Answers} from '../components/Answers'\n\nexport const GameForm = ({questions}: {questions: Question[]}) => {\n  const {\n    hasAnsweredCurrent,\n    currentQuestionIndex,\n    incrementCurrentQuestionIndex,\n  } = React.useContext<GameType>(GameContext)\n\n  const handleNextClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    incrementCurrentQuestionIndex()\n  }\n\n  return (\n    <Grid container spacing={3} alignItems=\"center\" justify=\"center\">\n      <Grid item xs={12}>\n        <TextField\n          label=\"Question\"\n          variant=\"outlined\"\n          value={questions[currentQuestionIndex].question}\n          name=\"question\"\n          fullWidth\n        />\n      </Grid>\n      <Answers\n        answers={questions[currentQuestionIndex].answers}\n        correct={questions[currentQuestionIndex].correct}\n      />\n      {hasAnsweredCurrent && (\n        <Grid item xs={3} style={{textAlign: 'center'}}>\n          <Button variant=\"contained\" onClick={handleNextClick} color=\"primary\">\n            Next\n          </Button>\n        </Grid>\n      )}\n    </Grid>\n  )\n}\n","import React from 'react'\nimport {useSelector} from 'react-redux'\n\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\n\nimport {queryQuestions} from '../features/questions/questionsSlice'\nimport {GameContext, GameType} from '../contexts/GameContext'\nimport {UsernameForm} from '../components/UsernameForm'\nimport {GameInfo} from '../components/GameInfo'\nimport {NoMoreQuestions, NoQuestions} from '../components/NoQuestions'\nimport {GameForm} from '../components/GameForm'\n\nexport const GamePage = () => {\n  const questions = useSelector(queryQuestions)\n  const numberOfQuestions = questions?.length\n  const {currentQuestionIndex, username} = React.useContext<GameType>(\n    GameContext,\n  )\n\n  const getPagePart = (): React.FunctionComponentElement<any> => {\n    if (numberOfQuestions === 0) {\n      return React.createElement(NoQuestions, null, null)\n    } else if (currentQuestionIndex >= numberOfQuestions) {\n      return React.createElement(NoMoreQuestions, null, null)\n    } else {\n      return React.createElement(GameForm, {questions}, null)\n    }\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <Typography component=\"h1\" variant=\"h4\">\n        Quiz game\n      </Typography>\n\n      {!username ? (\n        <UsernameForm />\n      ) : (\n        <>\n          <GameInfo />\n          {getPagePart()}\n        </>\n      )}\n    </Container>\n  )\n}\n","import React from 'react'\nimport Input from '@material-ui/core/Input'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Radio from '@material-ui/core/Radio'\nimport FormControl from '@material-ui/core/FormControl'\n\nexport const InputRadio = ({\n  label,\n  inputValue,\n  name,\n  checked,\n  radioValue,\n  handleChange,\n}: {\n  label: string\n  inputValue: string\n  name: string\n  checked: boolean\n  radioValue: number\n  handleChange: (any) => void\n}) => {\n  const handleTextFieldChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const value = event.currentTarget.value\n    handleChange({[event.currentTarget.name]: value})\n  }\n  const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    handleChange({correct: Number(event.target.value)})\n  }\n  return (\n    <Grid item xs={3}>\n      <FormControl required fullWidth>\n        <div style={{display: 'flex'}}>\n          <Radio\n            checked={checked}\n            onChange={handleRadioChange}\n            value={radioValue}\n          />\n          <Input\n            placeholder={label}\n            value={inputValue}\n            onChange={handleTextFieldChange}\n            name={name}\n          />\n        </div>\n      </FormControl>\n    </Grid>\n  )\n}\n\nexport const DisabledInputRadio = ({\n  label,\n  value,\n  correct,\n}: {\n  label: string\n  value: string\n  correct: string\n}) => {\n  return (\n    <Grid item xs={3}>\n      <div style={{display: 'flex'}}>\n        <Radio checked={correct === value} disabled />\n        <TextField\n          label={label}\n          variant=\"outlined\"\n          value={value}\n          disabled\n          fullWidth\n        />\n      </div>\n    </Grid>\n  )\n}\n","import React from 'react'\nimport {useDispatch} from 'react-redux'\nimport {v4 as uuidv4} from 'uuid'\n\nimport Grid from '@material-ui/core/Grid'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\nimport Radio from '@material-ui/core/Radio'\nimport Button from '@material-ui/core/Button'\nimport FormControl from '@material-ui/core/FormControl'\nimport {InputRadio} from '../../components/Input'\nimport Input from '@material-ui/core/Input'\n\nimport {addQuestion} from './questionsSlice'\n\nconst resetFormState = () => ({\n  question: '',\n  A: '',\n  B: '',\n  C: '',\n  D: '',\n  correct: 0,\n})\n\nexport function QuestionForm() {\n  const dispatch = useDispatch()\n\n  const [{question, A, B, C, D, correct}, setState] = React.useReducer(\n    (state, newState) => ({...state, ...newState}),\n    resetFormState(),\n  )\n\n  const handleAdd = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault()\n    const answers = [A, B, C, D]\n    dispatch(\n      addQuestion({\n        id: uuidv4(),\n        question,\n        answers,\n        correct: answers[correct],\n      }),\n    )\n    setState(resetFormState())\n  }\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.currentTarget.value\n    setState({[event.currentTarget.name]: value})\n  }\n\n  const handleChange = (value: any) => {\n    setState(value)\n  }\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h6\">\n        Add question\n      </Typography>\n\n      <form onSubmit={handleAdd}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <FormControl required fullWidth>\n              <Input\n                autoFocus\n                placeholder=\"Question\"\n                value={question}\n                onChange={handleInputChange}\n                name=\"question\"\n              />\n            </FormControl>\n          </Grid>\n          <InputRadio\n            label=\"Answer A\"\n            inputValue={A}\n            name=\"A\"\n            checked={correct === 0}\n            radioValue={0}\n            handleChange={handleChange}\n          />\n          <InputRadio\n            label=\"Answer B\"\n            inputValue={B}\n            name=\"B\"\n            checked={correct === 1}\n            radioValue={1}\n            handleChange={handleChange}\n          />\n          <InputRadio\n            label=\"Answer C\"\n            inputValue={C}\n            name=\"C\"\n            checked={correct === 2}\n            radioValue={2}\n            handleChange={handleChange}\n          />\n          <InputRadio\n            label=\"Answer D\"\n            inputValue={D}\n            name=\"D\"\n            checked={correct === 3}\n            radioValue={3}\n            handleChange={handleChange}\n          />\n        </Grid>\n        <Grid container spacing={3} justify=\"flex-end\">\n          <Grid item xs={3}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"medium\"\n              fullWidth\n            >\n              Add\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  )\n}\n","import React from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\n\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport IconButton from '@material-ui/core/IconButton'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nimport {removeQuestion, queryQuestions} from './questionsSlice'\nimport {DisabledInputRadio} from '../../components/Input'\n\nexport function QuestionList() {\n  const questions = useSelector(queryQuestions)\n  const dispatch = useDispatch()\n\n  const handleDeleteQuestion = (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ) => {\n    const id = event.currentTarget.dataset['id']\n\n    if (id) {\n      dispatch(removeQuestion(id))\n    }\n  }\n\n  return questions?.length > 0 ? (\n    <>\n      <Typography component=\"h1\" variant=\"h6\">\n        Questions\n      </Typography>\n      <List dense={false}>\n        {questions.map((question) => (\n          <ListItem key={question.id}>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <TextField\n                  label=\"Question\"\n                  variant=\"outlined\"\n                  value={question.question}\n                  disabled\n                  fullWidth\n                />\n              </Grid>\n              <DisabledInputRadio\n                label=\"Answer A\"\n                value={question.answers[0]}\n                correct={question.correct}\n              />\n              <DisabledInputRadio\n                label=\"Answer B\"\n                value={question.answers[1]}\n                correct={question.correct}\n              />\n              <DisabledInputRadio\n                label=\"Answer C\"\n                value={question.answers[2]}\n                correct={question.correct}\n              />\n              <DisabledInputRadio\n                label=\"Answer D\"\n                value={question.answers[3]}\n                correct={question.correct}\n              />\n            </Grid>\n\n            <ListItemSecondaryAction\n              data-id={question.id}\n              onClick={handleDeleteQuestion}\n              style={{right: '0'}}\n            >\n              <IconButton aria-label=\"Delete\">\n                <DeleteIcon />\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n        ))}\n      </List>\n    </>\n  ) : null\n}\n","import React from 'react'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\n\nimport {QuestionForm} from '../features/questions/QuestionForm'\nimport {QuestionList} from '../features/questions/QuestionList'\n\nexport const ManageQuestionsPage = () => {\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <Typography component=\"h1\" variant=\"h4\">\n        Manage questions\n      </Typography>\n      <QuestionList />\n      <QuestionForm />\n    </Container>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\n\nimport {ThemeProvider} from '@material-ui/core/styles'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Typography from '@material-ui/core/Typography'\nimport BottomNavigation from '@material-ui/core/BottomNavigation'\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction'\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify'\n\nimport {store} from './app/store'\nimport {GamePage} from './pages/GamePage'\nimport {ManageQuestionsPage} from './pages/ManageQuestionsPage'\nimport {GameProvider} from './contexts/GameContext'\n\nimport theme from './theme'\n\nenum Page {\n  ManageQuestions,\n  Game,\n}\n\nfunction App() {\n  const [page, setPage] = React.useState<Page>(() => Page.ManageQuestions)\n  return (\n    <div>\n      <Typography component=\"h1\" variant=\"h3\" align=\"center\">\n        Quiz Application\n      </Typography>\n      <BottomNavigation\n        value={page}\n        onChange={(event, newValue) => {\n          setPage(newValue)\n        }}\n        showLabels\n      >\n        <BottomNavigationAction\n          label=\"Manage questions\"\n          icon={<FormatAlignJustifyIcon />}\n        />\n        <BottomNavigationAction label=\"Quiz game\" icon={<PlayArrowIcon />} />\n      </BottomNavigation>\n      {page === Page.ManageQuestions ? (\n        <ManageQuestionsPage />\n      ) : (\n        <GameProvider>\n          <GamePage />\n        </GameProvider>\n      )}\n    </div>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import red from '@material-ui/core/colors/red'\nimport {createMuiTheme} from '@material-ui/core/styles'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n})\n\nexport default theme\n"],"sourceRoot":""}