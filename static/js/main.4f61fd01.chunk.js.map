{"version":3,"sources":["features/game/Answers.tsx","features/questions/questionsSlice.ts","app/localStorage.ts","app/localStorageMiddleware.ts","app/store.ts","contexts/GameContext.tsx","features/game/UsernameForm.tsx","features/game/GameInfo.tsx","features/game/NoQuestions.tsx","features/game/GameForm.tsx","pages/GamePage.tsx","components/Input.tsx","features/questions/constans.ts","features/questions/QuestionForm.tsx","features/questions/QuestionList.tsx","pages/ManageQuestionsPage.tsx","index.tsx","theme.ts"],"names":["AnswerColor","questionsSlice","createSlice","name","initialState","value","reducers","addQuestion","state","action","payload","removeQuestion","filter","question","id","loadQuestions","actions","queryQuestions","questions","saveState","serializedState","JSON","stringify","localStorage","setItem","err","console","log","localStorageMiddleware","store","next","type","previewQuestions","getState","updatedQuestion","preloadedState","getItem","parse","loadState","configureStore","reducer","questionsReducer","middleware","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","concat","GameContext","React","createContext","username","updateUsername","score","incrementScore","hasAnsweredCurrent","toggleAnsweredCurrent","currentQuestionIndex","incrementCurrentQuestionIndex","restart","GameProvider","children","useState","setUsername","setScore","setHasAnsweredCurrent","setCurrentQuestionIndex","Provider","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","form","width","UsernameForm","classes","useContext","Container","component","maxWidth","className","Typography","variant","onSubmit","event","preventDefault","FormControl","margin","required","fullWidth","InputLabel","htmlFor","Input","autoComplete","autoFocus","onChange","currentTarget","Button","color","createStyles","root","height","Username","align","Score","GameInfo","memo","useMemo","Grid","container","justify","item","xs","Paper","NoMoreQuestions","memoizedRestart","useCallback","style","textAlign","onClick","NoQuestions","Answers","answers","correct","selectedAnswer","setSelectedAnswer","handleAnswerClick","answer","dataset","map","index","backgroundColor","getBackgroundColor","key","disabled","data-answer","selected","MATCHED_GREEN","NOT_MATCHED_RED","SELECTED_BLUE","NOT_SELECTED_GREY","GameForm","handleNextClick","TextField","label","GamePage","useSelector","numberOfQuestions","length","hasMoreQuesions","createElement","InputRadio","inputValue","checked","radioValue","handleChange","Radio","Number","target","placeholder","DisabledInputRadio","ANSWER_LABELS","ANSWER_NAMES","QuestionForm","dispatch","useDispatch","useReducer","newState","A","B","C","D","setState","handleAdd","uuidv4","handleAnswerChange","size","QuestionList","handleDeleteQuestion","List","ListItem","ListItemSecondaryAction","data-id","right","IconButton","aria-label","Page","ManageQuestionsPage","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","Navigation","activePage","updateActivePage","BottomNavigation","newValue","showLabels","BottomNavigationAction","icon","App","ManageQuestions","setActivePage","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.4f61fd01.chunk.js","sourcesContent":["import React from 'react'\n\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\n\nimport {GameContext, GameType} from '../../contexts/GameContext'\n\nexport const Answers = ({\n  answers,\n  correct,\n}: {\n  answers: string[]\n  correct: string\n}) => {\n  const {\n    hasAnsweredCurrent,\n    toggleAnsweredCurrent,\n    incrementScore,\n  } = React.useContext<GameType>(GameContext)\n\n  const [selectedAnswer, setSelectedAnswer] = React.useState<\n    string | undefined\n  >(() => '')\n\n  const handleAnswerClick = React.useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      const answer = event.currentTarget.dataset['answer']\n      setSelectedAnswer(() => answer)\n      if (answer === correct) {\n        incrementScore()\n      }\n      toggleAnsweredCurrent()\n    },\n    [correct, incrementScore, toggleAnsweredCurrent],\n  )\n\n  return (\n    <>\n      {answers.map((answer: string, index: number) => {\n        const backgroundColor: string = getBackgroundColor(\n          answer,\n          correct,\n          selectedAnswer,\n        )\n\n        return (\n          <Grid item xs={3} key={index} style={{textAlign: 'center'}}>\n            {hasAnsweredCurrent ? (\n              <Button\n                variant=\"contained\"\n                disabled\n                fullWidth\n                style={{backgroundColor: `${backgroundColor}`}}\n              >\n                {answer}\n              </Button>\n            ) : (\n              <Button\n                variant=\"contained\"\n                data-answer={answer}\n                fullWidth\n                onClick={handleAnswerClick}\n              >\n                {answer}\n              </Button>\n            )}\n          </Grid>\n        )\n      })}\n    </>\n  )\n}\nenum AnswerColor {\n  MATCHED_GREEN = 'rgba(0, 128, 0, 0.7)',\n  NOT_MATCHED_RED = 'rgba(255, 0, 0, 0.7)',\n  SELECTED_BLUE = 'rgba(0, 0, 255, 0.7)',\n  NOT_SELECTED_GREY = 'rgba(0, 0, 0, 0.12)',\n}\nconst getBackgroundColor = (\n  answer: string,\n  correct: string,\n  selected: string | undefined,\n): string => {\n  let backgroundColor\n\n  if (selected && answer === correct && selected === correct) {\n    backgroundColor = AnswerColor.MATCHED_GREEN\n  } else if (selected && answer === correct && selected !== correct) {\n    backgroundColor = AnswerColor.NOT_MATCHED_RED\n  } else if (selected === answer) {\n    backgroundColor = AnswerColor.SELECTED_BLUE\n  } else {\n    backgroundColor = AnswerColor.NOT_SELECTED_GREY\n  }\n  return backgroundColor as string\n}\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\nimport {RootState} from '../../app/store'\n\nexport interface Question {\n  id: string\n  question: string\n  answers: string[]\n  correct: string\n}\nexport interface QuestionsState {\n  value: Question[]\n}\n\nconst initialState: QuestionsState = {\n  value: [],\n}\n\nexport const questionsSlice = createSlice({\n  name: 'questions',\n  initialState,\n  reducers: {\n    addQuestion: (state, action: PayloadAction<Question>) => {\n      return {value: [...state.value, action.payload]}\n    },\n    removeQuestion: (state, action: PayloadAction<string>) => {\n      return {\n        value: state.value.filter(\n          (question: Question) => action.payload !== question.id,\n        ),\n      }\n    },\n    loadQuestions: (state, action: PayloadAction<Question[]>) => {\n      return {value: action.payload}\n    },\n  },\n})\n\nexport const {addQuestion, removeQuestion} = questionsSlice.actions\n\nexport const queryQuestions = (state: RootState) => state.questions.value\n\nexport default questionsSlice.reducer\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('state')\n    if (serializedState === null) {\n      return undefined\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    console.log('error', err)\n    return undefined\n  }\n}\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('state', serializedState)\n  } catch (err) {\n    console.log('error', err)\n  }\n}\n","import {saveState} from './localStorage'\nimport {\n  addQuestion,\n  removeQuestion,\n  Question,\n} from '../features/questions/questionsSlice'\n\nexport const localStorageMiddleware = (store) => (next) => (action) => {\n  const {type, payload} = action\n  if (type === addQuestion.type) {\n    const previewQuestions = store.getState().questions.value\n    saveState({\n      questions: {\n        value: [...previewQuestions, payload],\n      },\n    })\n  }\n  if (type === removeQuestion.type) {\n    const previewQuestions = store.getState().questions.value\n    const updatedQuestion = previewQuestions.filter(\n      (question: Question) => payload !== question.id,\n    )\n    saveState({\n      questions: {\n        value: [...updatedQuestion],\n      },\n    })\n  }\n  return next(action)\n}\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\nimport questionsReducer from '../features/questions/questionsSlice'\nimport {loadState} from './localStorage'\nimport {localStorageMiddleware} from './localStorageMiddleware'\n\nconst preloadedState = loadState()\n\nexport const store = configureStore({\n  reducer: {\n    questions: questionsReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      thunk: false,\n      immutableCheck: false,\n      serializableCheck: false,\n    }).concat(localStorageMiddleware),\n  preloadedState,\n})\n\nexport type RootState = ReturnType<typeof store.getState>\n","import React from 'react'\n\nexport type GameType = {\n  username: string | null\n  updateUsername: (value: string) => void\n  score: number\n  incrementScore: () => void\n  hasAnsweredCurrent: boolean\n  toggleAnsweredCurrent: () => void\n  currentQuestionIndex: number\n  incrementCurrentQuestionIndex: () => void\n  restart: () => void\n}\nexport const GameContext = React.createContext<GameType>({\n  username: null,\n  updateUsername: (value) => {},\n  score: 0,\n  incrementScore: () => {},\n  hasAnsweredCurrent: false,\n  toggleAnsweredCurrent: () => {},\n  currentQuestionIndex: 0,\n  incrementCurrentQuestionIndex: () => {},\n  restart: () => {},\n})\nexport const GameProvider = ({children}: {children?: React.ReactNode}) => {\n  const [username, setUsername] = React.useState<string | null>(() => null)\n  const [score, setScore] = React.useState<number>(() => 0)\n  const [hasAnsweredCurrent, setHasAnsweredCurrent] = React.useState<boolean>(\n    () => false,\n  )\n  const [currentQuestionIndex, setCurrentQuestionIndex] = React.useState<\n    number\n  >(() => 0)\n\n  const updateUsername = (username: string) => {\n    setUsername(() => username)\n  }\n  const incrementScore = () => {\n    setScore((score: number) => ++score)\n  }\n  const toggleAnsweredCurrent = () => {\n    setHasAnsweredCurrent((hasAnsweredCurrent: boolean) => !hasAnsweredCurrent)\n  }\n  const incrementCurrentQuestionIndex = () => {\n    toggleAnsweredCurrent()\n    setCurrentQuestionIndex(\n      (currentQuestionIndex: number) => ++currentQuestionIndex,\n    )\n  }\n  const restart = () => {\n    setScore(0)\n    setCurrentQuestionIndex(0)\n    setHasAnsweredCurrent(false)\n  }\n  return (\n    <GameContext.Provider\n      value={{\n        username,\n        updateUsername,\n        score,\n        incrementScore,\n        hasAnsweredCurrent,\n        toggleAnsweredCurrent,\n        currentQuestionIndex,\n        incrementCurrentQuestionIndex,\n        restart,\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  )\n}\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport FormControl from '@material-ui/core/FormControl'\nimport Input from '@material-ui/core/Input'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Typography from '@material-ui/core/Typography'\nimport Container from '@material-ui/core/Container'\nimport {makeStyles} from '@material-ui/core/styles'\n\nimport {GameContext, GameType} from '../../contexts/GameContext'\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1),\n  },\n}))\n\nexport const UsernameForm = () => {\n  const classes = useStyles()\n  const {updateUsername} = React.useContext<GameType>(GameContext)\n  const [username, setUsername] = React.useState<string>(() => '')\n\n  const handleSetUsername = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault()\n    updateUsername(username)\n  }\n  const handleUsernameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const username = event.currentTarget.value\n    setUsername(() => username)\n  }\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Username\n        </Typography>\n        <form onSubmit={handleSetUsername} className={classes.form}>\n          <FormControl margin=\"normal\" required fullWidth>\n            <InputLabel htmlFor=\"username\">Username</InputLabel>\n            <Input\n              id=\"username\"\n              name=\"username\"\n              autoComplete=\"username\"\n              autoFocus\n              onChange={handleUsernameChange}\n              value={username}\n            />\n          </FormControl>\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\n            Set\n          </Button>\n        </form>\n      </div>\n    </Container>\n  )\n}\n","import React from 'react'\nimport {Theme, createStyles, makeStyles} from '@material-ui/core/styles'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Grid from '@material-ui/core/Grid'\n\nimport {GameContext, GameType} from '../../contexts/GameContext'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      '& > *': {\n        margin: theme.spacing(1),\n        width: theme.spacing(20),\n        height: theme.spacing(10),\n      },\n    },\n  }),\n)\n\nconst Username = ({value}: {value: string | null}) => {\n  return (\n    <Typography variant=\"subtitle1\" component=\"h2\" align=\"center\">\n      Username: {value}\n    </Typography>\n  )\n}\nconst Score = ({value}: {value: number}) => {\n  return (\n    <Typography variant=\"subtitle2\" component=\"h2\" align=\"center\">\n      Score: {value}\n    </Typography>\n  )\n}\n\nexport const GameInfo = React.memo(() => {\n  const classes = useStyles()\n  const {username, score} = React.useContext<GameType>(GameContext)\n\n  return React.useMemo(\n    () => (\n      <Grid container spacing={3} justify=\"flex-end\">\n        <Grid item xs={3}>\n          <div className={classes.root}>\n            <Paper variant=\"outlined\">\n              <Username value={username} />\n              <Score value={score} />\n            </Paper>\n          </div>\n        </Grid>\n      </Grid>\n    ),\n    [username, score],\n  )\n})\n","import React from 'react'\n\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\n\nimport {GameContext, GameType} from '../../contexts/GameContext'\n\nexport const NoMoreQuestions = () => {\n  const {restart} = React.useContext<GameType>(GameContext)\n\n  const memoizedRestart = React.useCallback(() => restart(), [restart])\n\n  return (\n    <>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item xs={5} style={{textAlign: 'center'}}>\n          <Typography component=\"h1\" variant=\"h4\">\n            No more questions\n          </Typography>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item xs={3} style={{textAlign: 'center'}}>\n          <Button\n            onClick={memoizedRestart}\n            variant=\"contained\"\n            color=\"primary\"\n            fullWidth\n          >\n            Restart\n          </Button>\n        </Grid>\n      </Grid>\n    </>\n  )\n}\nexport const NoQuestions = () => {\n  return (\n    <>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item xs={5} style={{textAlign: 'center'}}>\n          <Typography component=\"h1\" variant=\"h4\">\n            No questions\n          </Typography>\n        </Grid>\n      </Grid>\n    </>\n  )\n}\n","import React from 'react'\n\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\n\nimport {Question} from '../questions/questionsSlice'\nimport {GameContext, GameType} from '../../contexts/GameContext'\nimport {Answers} from './Answers'\n\nexport const GameForm = ({questions}: {questions: Question[]}) => {\n  const {\n    hasAnsweredCurrent,\n    currentQuestionIndex,\n    incrementCurrentQuestionIndex,\n  } = React.useContext<GameType>(GameContext)\n\n  const handleNextClick = React.useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      incrementCurrentQuestionIndex()\n    },\n    [incrementCurrentQuestionIndex],\n  )\n\n  return (\n    <Grid container spacing={3} alignItems=\"center\" justify=\"center\">\n      <Grid item xs={12}>\n        <TextField\n          label=\"Question\"\n          variant=\"outlined\"\n          value={questions[currentQuestionIndex].question}\n          name=\"question\"\n          fullWidth\n        />\n      </Grid>\n      <Answers\n        answers={questions[currentQuestionIndex].answers}\n        correct={questions[currentQuestionIndex].correct}\n      />\n      {hasAnsweredCurrent && (\n        <Grid item xs={3} style={{textAlign: 'center'}}>\n          <Button variant=\"contained\" onClick={handleNextClick} color=\"primary\">\n            Next\n          </Button>\n        </Grid>\n      )}\n    </Grid>\n  )\n}\n","import React from 'react'\nimport {useSelector} from 'react-redux'\n\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\n\nimport {queryQuestions} from '../features/questions/questionsSlice'\nimport {GameContext, GameType} from '../contexts/GameContext'\nimport {UsernameForm} from '../features/game/UsernameForm'\nimport {GameInfo} from '../features/game/GameInfo'\nimport {NoMoreQuestions, NoQuestions} from '../features/game/NoQuestions'\nimport {GameForm} from '../features/game/GameForm'\n\nexport const GamePage = () => {\n  const questions = useSelector(queryQuestions)\n  const numberOfQuestions = questions?.length\n\n  const {currentQuestionIndex, username} = React.useContext<GameType>(\n    GameContext,\n  )\n  const hasMoreQuesions = React.useMemo(\n    () => currentQuestionIndex >= numberOfQuestions,\n    [currentQuestionIndex, numberOfQuestions],\n  )\n\n  const getPagePart = (): React.FunctionComponentElement<any> => {\n    if (numberOfQuestions === 0) {\n      return React.createElement(NoQuestions, null, null)\n    } else if (hasMoreQuesions) {\n      return React.createElement(NoMoreQuestions, null, null)\n    } else {\n      return React.createElement(GameForm, {questions}, null)\n    }\n  }\n\n  return React.useMemo(\n    () => (\n      <Container component=\"main\" maxWidth=\"md\">\n        <Typography component=\"h1\" variant=\"h4\">\n          Quiz game\n        </Typography>\n\n        {!username ? (\n          <UsernameForm />\n        ) : (\n          <>\n            <GameInfo />\n            {getPagePart()}\n          </>\n        )}\n      </Container>\n    ),\n    [username, questions, hasMoreQuesions],\n  )\n}\n","import React from 'react'\nimport Input from '@material-ui/core/Input'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Radio from '@material-ui/core/Radio'\nimport FormControl from '@material-ui/core/FormControl'\n\nexport const InputRadio = React.memo(\n  ({\n    label,\n    inputValue,\n    name,\n    checked,\n    radioValue,\n    handleChange,\n  }: {\n    label: string\n    inputValue: string\n    name: string\n    checked: boolean\n    radioValue: number\n    handleChange: (any) => void\n  }) => {\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      const value = event.currentTarget.value\n      handleChange({[event.currentTarget.name]: value})\n    }\n    const handleRadioChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      handleChange({correct: Number(event.target.value)})\n    }\n\n    return (\n      <Grid item xs={3}>\n        <FormControl required fullWidth>\n          <div style={{display: 'flex'}}>\n            <Radio\n              checked={checked}\n              onChange={handleRadioChange}\n              value={radioValue}\n            />\n            <Input\n              placeholder={label}\n              value={inputValue}\n              onChange={handleInputChange}\n              name={name}\n            />\n          </div>\n        </FormControl>\n      </Grid>\n    )\n  },\n)\n\nexport const DisabledInputRadio = React.memo(\n  ({\n    label,\n    value,\n    correct,\n  }: {\n    label: string\n    value: string\n    correct: string\n  }) => {\n    return (\n      <Grid item xs={3}>\n        <div style={{display: 'flex'}}>\n          <Radio checked={correct === value} disabled />\n          <TextField\n            label={label}\n            variant=\"outlined\"\n            value={value}\n            disabled\n            fullWidth\n          />\n        </div>\n      </Grid>\n    )\n  },\n)\n","export const ANSWER_LABELS: string[] = [\n  'Answer A',\n  'Answer B',\n  'Answer C',\n  'Answer D',\n]\nexport const ANSWER_NAMES: string[] = ['A', 'B', 'C', 'D']\n","import React from 'react'\nimport {useDispatch} from 'react-redux'\nimport {v4 as uuidv4} from 'uuid'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport FormControl from '@material-ui/core/FormControl'\nimport {InputRadio} from '../../components/Input'\nimport Input from '@material-ui/core/Input'\nimport {ANSWER_LABELS, ANSWER_NAMES} from './constans'\n\nimport {addQuestion} from './questionsSlice'\n\nconst getInitFormState = () => ({\n  question: '',\n  A: '',\n  B: '',\n  C: '',\n  D: '',\n  correct: 0,\n})\n\nexport function QuestionForm() {\n  const dispatch = useDispatch()\n\n  const [{question, A, B, C, D, correct}, setState] = React.useReducer(\n    (state, newState) => ({...state, ...newState}),\n    getInitFormState(),\n  )\n\n  const handleAdd = React.useCallback(\n    (event: React.FormEvent<EventTarget>) => {\n      event.preventDefault()\n      const answers = [A, B, C, D]\n      dispatch(\n        addQuestion({\n          id: uuidv4(),\n          question,\n          answers,\n          correct: answers[correct],\n        }),\n      )\n      setState(getInitFormState())\n    },\n    [dispatch, question, A, B, C, D, correct],\n  )\n\n  const handleQuestionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.currentTarget.value\n    setState({[event.currentTarget.name]: value})\n  }\n\n  const handleAnswerChange = React.useCallback((value: any) => {\n    setState(value)\n  }, [])\n\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h6\">\n        Add question\n      </Typography>\n\n      <form onSubmit={handleAdd}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <FormControl required fullWidth>\n              <Input\n                autoFocus\n                placeholder=\"Question\"\n                value={question}\n                onChange={handleQuestionChange}\n                name=\"question\"\n              />\n            </FormControl>\n          </Grid>\n          {[A, B, C, D].map((answer: string, index: number) => {\n            return (\n              <InputRadio\n                key={`answerform-${index}`}\n                label={ANSWER_LABELS[index]}\n                inputValue={answer}\n                name={ANSWER_NAMES[index]}\n                checked={correct === index}\n                radioValue={index}\n                handleChange={handleAnswerChange}\n              />\n            )\n          })}\n        </Grid>\n        <Grid container spacing={3} justify=\"flex-end\">\n          <Grid item xs={3}>\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"medium\"\n              fullWidth\n            >\n              Add\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n  )\n}\n","import React from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\n\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport IconButton from '@material-ui/core/IconButton'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nimport {removeQuestion, queryQuestions, Question} from './questionsSlice'\nimport {DisabledInputRadio} from '../../components/Input'\nimport {ANSWER_LABELS} from './constans'\n\nexport function QuestionList() {\n  const questions = useSelector(queryQuestions)\n  const dispatch = useDispatch()\n\n  const handleDeleteQuestion = React.useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      const id = event.currentTarget.dataset['id']\n\n      if (id) {\n        dispatch(removeQuestion(id))\n      }\n    },\n    [dispatch],\n  )\n\n  return questions?.length > 0 ? (\n    <>\n      <Typography component=\"h1\" variant=\"h6\">\n        Questions\n      </Typography>\n      <List>\n        {questions.map((question: Question) => (\n          <ListItem key={question.id}>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <TextField\n                  label=\"Question\"\n                  variant=\"outlined\"\n                  value={question.question}\n                  disabled\n                  fullWidth\n                />\n              </Grid>\n              {question.answers.map((answer: string, index: number) => {\n                return (\n                  <DisabledInputRadio\n                    key={`answer-${index}`}\n                    label={ANSWER_LABELS[index]}\n                    value={answer}\n                    correct={question.correct}\n                  />\n                )\n              })}\n            </Grid>\n\n            <ListItemSecondaryAction\n              data-id={question.id}\n              onClick={handleDeleteQuestion}\n              style={{right: '0'}}\n            >\n              <IconButton aria-label=\"Delete\">\n                <DeleteIcon />\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItem>\n        ))}\n      </List>\n    </>\n  ) : null\n}\n","import React from 'react'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\n\nimport {QuestionForm} from '../features/questions/QuestionForm'\nimport {QuestionList} from '../features/questions/QuestionList'\n\nexport const ManageQuestionsPage = () => {\n  return (\n    <Container component=\"main\" maxWidth=\"md\">\n      <Typography component=\"h1\" variant=\"h4\">\n        Manage questions\n      </Typography>\n      <QuestionList />\n      <QuestionForm />\n    </Container>\n  )\n}\n","import React from 'react'\n\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\n\nimport {ThemeProvider} from '@material-ui/core/styles'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Typography from '@material-ui/core/Typography'\nimport BottomNavigation from '@material-ui/core/BottomNavigation'\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction'\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify'\n\nimport {store} from './app/store'\nimport {GamePage} from './pages/GamePage'\nimport {ManageQuestionsPage} from './pages/ManageQuestionsPage'\nimport {GameProvider} from './contexts/GameContext'\n\nimport theme from './theme'\n\nenum Page {\n  ManageQuestions,\n  QuizGame,\n}\nconst Navigation = ({\n  activePage,\n  updateActivePage,\n}: {\n  activePage: Page\n  updateActivePage: (page: Page) => void\n}) => {\n  return (\n    <BottomNavigation\n      value={activePage as number}\n      onChange={(event: React.ChangeEvent<any>, newValue: number) => {\n        updateActivePage(newValue as Page)\n      }}\n      showLabels\n    >\n      <BottomNavigationAction\n        label=\"Manage questions\"\n        icon={<FormatAlignJustifyIcon />}\n      />\n      <BottomNavigationAction label=\"Quiz game\" icon={<PlayArrowIcon />} />\n    </BottomNavigation>\n  )\n}\n\nfunction App() {\n  const [activePage, setActivePage] = React.useState<Page>(() => Page.ManageQuestions)\n  return (\n    <>\n      <Typography component=\"h1\" variant=\"h3\" align=\"center\">\n        Quiz Application\n      </Typography>\n      <Navigation activePage={activePage} updateActivePage={setActivePage} />\n      {activePage === Page.ManageQuestions ? (\n        <ManageQuestionsPage />\n      ) : (\n        <GameProvider>\n          <GamePage />\n        </GameProvider>\n      )}\n    </>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import red from '@material-ui/core/colors/red'\nimport {createMuiTheme} from '@material-ui/core/styles'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n})\n\nexport default theme\n"],"sourceRoot":""}